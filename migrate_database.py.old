#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Emergencias Villa Allende
Script de Migraci√≥n Autom√°tica de Base de Datos - Versi√≥n Actualizada

Este script verifica y migra autom√°ticamente la base de datos
a la nueva estructura, agregando campos faltantes y manteniendo datos existentes.

IMPORTANTE: Ahora compatible con la nueva estructura integrada en app.py
"""

import sqlite3
import os
import shutil
from datetime import datetime
import logging
import sys

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('migration.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class DatabaseMigrator:
    def __init__(self, db_path='emergency_system.db'):
        self.db_path = db_path
        self.backup_path = f"{db_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        self.migration_log = []
        
    def log_migration(self, message):
        """Registrar mensaje de migraci√≥n"""
        self.migration_log.append(f"{datetime.now().strftime('%H:%M:%S')} - {message}")
        logging.info(message)
        
    def create_backup(self):
        """Crear backup de la base de datos antes de migrar"""
        try:
            if os.path.exists(self.db_path):
                shutil.copy2(self.db_path, self.backup_path)
                self.log_migration(f"‚úÖ Backup creado: {self.backup_path}")
                return True
            else:
                self.log_migration("‚ÑπÔ∏è Base de datos nueva, no se necesita backup")
                return True
        except Exception as e:
            self.log_migration(f"‚ùå Error creando backup: {e}")
            return False
    
    def check_table_exists(self, conn, table_name):
        """Verificar si una tabla existe"""
        cursor = conn.cursor()
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name=?
        """, (table_name,))
        result = cursor.fetchone()
        return result is not None
    
    def check_column_exists(self, conn, table_name, column_name):
        """Verificar si una columna existe en una tabla"""
        cursor = conn.cursor()
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns = [column[1] for column in cursor.fetchall()]
        return column_name in columns
    
    def add_column_if_not_exists(self, conn, table_name, column_name, column_definition):
        """Agregar columna si no existe"""
        try:
            if not self.check_column_exists(conn, table_name, column_name):
                cursor = conn.cursor()
                cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN {column_name} {column_definition}")
                conn.commit()
                self.log_migration(f"‚úÖ Columna '{column_name}' agregada a tabla '{table_name}'")
                return True
            else:
                self.log_migration(f"‚ÑπÔ∏è Columna '{column_name}' ya existe en tabla '{table_name}'")
                return True
        except Exception as e:
            self.log_migration(f"‚ùå Error agregando columna '{column_name}': {e}")
            return False
    
    def migrate_personas_table(self, conn):
        """Migrar tabla personas agregando campo email"""
        self.log_migration("üîÑ Migrando tabla 'personas'...")
        
        if not self.check_table_exists(conn, 'personas'):
            self.log_migration("‚ÑπÔ∏è Tabla 'personas' no existe, se crear√° con la nueva estructura")
            return True
        
        # Agregar campo email si no existe
        return self.add_column_if_not_exists(
            conn, 
            'personas', 
            'email', 
            'VARCHAR(120)'
        )
    
    def migrate_usuarios_table(self, conn):
        """Migrar tabla usuarios agregando campos de seguridad"""
        self.log_migration("üîÑ Migrando tabla 'usuarios'...")
        
        if not self.check_table_exists(conn, 'usuarios'):
            self.log_migration("‚ÑπÔ∏è Tabla 'usuarios' no existe, se crear√° con la nueva estructura")
            return True
        
        # Agregar campos de seguridad
        success = True
        
        success &= self.add_column_if_not_exists(
            conn, 'usuarios', 'intentos_login', 'INTEGER DEFAULT 0'
        )
        
        success &= self.add_column_if_not_exists(
            conn, 'usuarios', 'bloqueado_hasta', 'DATETIME'
        )
        
        return success
    
    def update_configuracion_table(self, conn):
        """Actualizar tabla configuraci√≥n con nuevos campos"""
        self.log_migration("üîÑ Actualizando tabla 'configuracion'...")
        
        if not self.check_table_exists(conn, 'configuracion'):
            self.log_migration("‚ÑπÔ∏è Tabla 'configuracion' no existe, se crear√° con la nueva estructura")
            return True
        
        # Agregar campos si no existen
        success = True
        
        success &= self.add_column_if_not_exists(
            conn, 'configuracion', 'categoria', 'VARCHAR(50) DEFAULT "general"'
        )
        
        success &= self.add_column_if_not_exists(
            conn, 'configuracion', 'descripcion', 'VARCHAR(200)'
        )
        
        success &= self.add_column_if_not_exists(
            conn, 'configuracion', 'fecha_modificacion', 'DATETIME DEFAULT CURRENT_TIMESTAMP'
        )
        
        return success
    
    def insert_default_configurations(self, conn):
        """Insertar configuraciones por defecto si no existen"""
        self.log_migration("üîÑ Verificando configuraciones por defecto...")
        
        # Configuraciones por defecto
        default_configs = [
            ('whatsapp_token', '', 'Token de API WhatsApp', 'whatsapp'),
            ('whatsapp_uid', '', 'UID del n√∫mero WhatsApp', 'whatsapp'),
            ('telefono_demva', '', 'Tel√©fono DEMVA', 'telefonos'),
            ('telefono_cec', '', 'Tel√©fono CEC', 'telefonos'),
            ('telefono_telemedicina', '', 'Tel√©fono Telemedicina', 'telefonos'),
            ('telefono_bomberos', '', 'Tel√©fono Bomberos', 'telefonos'),
            ('telefono_seguridad', '', 'Tel√©fono Seguridad', 'telefonos'),
            ('telefono_defensa', '', 'Tel√©fono Defensa Civil', 'telefonos'),
            ('telefono_supervisor', '', 'Tel√©fono Supervisor', 'telefonos'),
            ('logo_sistema', '', 'Logo personalizado del sistema', 'sistema'),
            ('nombre_organizacion', 'Municipalidad de Villa Allende', 'Nombre de la organizaci√≥n', 'sistema'),
            ('auto_whatsapp', 'true', 'Env√≠o autom√°tico de WhatsApp', 'sistema'),
            ('protocolo_107_habilitado', 'true', 'Protocolo 107 habilitado', 'sistema'),
            ('backup_automatico', 'true', 'Backup autom√°tico habilitado', 'sistema')
        ]
        
        try:
            cursor = conn.cursor()
            configs_added = 0
            
            for clave, valor, descripcion, categoria in default_configs:
                # Verificar si ya existe
                cursor.execute("SELECT id FROM configuracion WHERE clave = ?", (clave,))
                if cursor.fetchone() is None:
                    # Insertar configuraci√≥n
                    cursor.execute("""
                        INSERT INTO configuracion (clave, valor, descripcion, categoria, fecha_creacion, fecha_modificacion)
                        VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                    """, (clave, valor, descripcion, categoria))
                    configs_added += 1
            
            conn.commit()
            
            if configs_added > 0:
                self.log_migration(f"‚úÖ {configs_added} configuraciones por defecto agregadas")
            else:
                self.log_migration("‚ÑπÔ∏è Todas las configuraciones por defecto ya existen")
            
            return True
            
        except Exception as e:
            self.log_migration(f"‚ùå Error insertando configuraciones por defecto: {e}")
            return False
    
    def verify_migration_integrity(self, conn):
        """Verificar integridad de la migraci√≥n"""
        self.log_migration("üîç Verificando integridad de la migraci√≥n...")
        
        checks = []
        
        try:
            cursor = conn.cursor()
            
            # Verificar que campo email existe en personas
            if self.check_column_exists(conn, 'personas', 'email'):
                checks.append("‚úÖ Campo 'email' existe en tabla 'personas'")
            else:
                checks.append("‚ùå Campo 'email' NO existe en tabla 'personas'")
            
            # Verificar campos de seguridad en usuarios
            if self.check_column_exists(conn, 'usuarios', 'intentos_login'):
                checks.append("‚úÖ Campos de seguridad en tabla 'usuarios'")
            else:
                checks.append("‚ùå Campos de seguridad faltantes en tabla 'usuarios'")
            
            # Verificar configuraciones
            cursor.execute("SELECT COUNT(*) FROM configuracion")
            config_count = cursor.fetchone()[0]
            if config_count > 0:
                checks.append(f"‚úÖ {config_count} configuraciones en base de datos")
            else:
                checks.append("‚ö†Ô∏è No hay configuraciones en base de datos")
            
            # Verificar usuario admin
            cursor.execute("SELECT COUNT(*) FROM usuarios WHERE rol = 'admin' AND activo = 1")
            admin_count = cursor.fetchone()[0]
            if admin_count > 0:
                checks.append(f"‚úÖ {admin_count} usuario(s) admin activo(s)")
            else:
                checks.append("‚ö†Ô∏è No hay usuarios admin activos")
        
        except Exception as e:
            checks.append(f"‚ùå Error verificando integridad: {e}")
        
        # Mostrar resultados
        for check in checks:
            self.log_migration(check)
        
        return all("‚úÖ" in check for check in checks if not check.startswith("‚ö†Ô∏è"))
    
    def create_tables_if_not_exist(self, conn):
        """Crear todas las tablas si no existen"""
        self.log_migration("üèóÔ∏è Creando tablas base si no existen...")
        
        try:
            cursor = conn.cursor()
            
            # Crear tabla usuarios
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS usuarios (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username VARCHAR(50) UNIQUE NOT NULL,
                    password_hash VARCHAR(255) NOT NULL,
                    nombre VARCHAR(100) NOT NULL,
                    apellido VARCHAR(100) NOT NULL,
                    email VARCHAR(120),
                    telefono VARCHAR(20),
                    rol VARCHAR(20) DEFAULT 'operador' NOT NULL,
                    activo BOOLEAN DEFAULT 1,
                    fecha_creacion DATETIME DEFAULT CURRENT_TIMESTAMP,
                    ultimo_login DATETIME,
                    llamados_atendidos INTEGER DEFAULT 0,
                    intentos_login INTEGER DEFAULT 0,
                    bloqueado_hasta DATETIME
                )
            """)
            
            # Crear tabla personas
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS personas (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nombre VARCHAR(100) NOT NULL,
                    apellido VARCHAR(100) NOT NULL,
                    documento VARCHAR(20),
                    telefono VARCHAR(20),
                    email VARCHAR(120),
                    direccion VARCHAR(200),
                    barrio VARCHAR(100),
                    fecha_nacimiento DATE,
                    fecha_creacion DATETIME DEFAULT CURRENT_TIMESTAMP,
                    observaciones TEXT
                )
            """)
            
            # Crear tabla llamados
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS llamados (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    fecha DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
                    usuario_id INTEGER NOT NULL,
                    nombre_llamante VARCHAR(100) NOT NULL,
                    telefono_llamante VARCHAR(20),
                    persona_id INTEGER,
                    nombre_afectado VARCHAR(100),
                    edad_afectado INTEGER,
                    sexo_afectado VARCHAR(1),
                    direccion VARCHAR(200) NOT NULL,
                    barrio VARCHAR(100) NOT NULL,
                    es_via_publica BOOLEAN DEFAULT 0,
                    punto_referencia VARCHAR(200),
                    tipo_emergencia VARCHAR(50) NOT NULL,
                    motivo_llamado TEXT NOT NULL,
                    prioridad VARCHAR(10) NOT NULL,
                    protocolo_107 TEXT,
                    estado VARCHAR(20) DEFAULT 'activo',
                    derivado_a VARCHAR(100),
                    observaciones TEXT,
                    fecha_cierre DATETIME,
                    whatsapp_enviado BOOLEAN DEFAULT 0,
                    whatsapp_respuesta TEXT,
                    FOREIGN KEY (usuario_id) REFERENCES usuarios (id),
                    FOREIGN KEY (persona_id) REFERENCES personas (id)
                )
            """)
            
            # Crear tabla guardias
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS guardias (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    fecha DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
                    usuario_id INTEGER NOT NULL,
                    actividad TEXT NOT NULL,
                    tipo VARCHAR(20) DEFAULT 'novedad',
                    observaciones TEXT,
                    FOREIGN KEY (usuario_id) REFERENCES usuarios (id)
                )
            """)
            
            # Crear tabla configuracion
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS configuracion (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    clave VARCHAR(100) UNIQUE NOT NULL,
                    valor TEXT,
                    descripcion VARCHAR(200),
                    categoria VARCHAR(50) DEFAULT 'general',
                    fecha_creacion DATETIME DEFAULT CURRENT_TIMESTAMP,
                    fecha_modificacion DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            conn.commit()
            self.log_migration("‚úÖ Todas las tablas creadas/verificadas correctamente")
            return True
            
        except Exception as e:
            self.log_migration(f"‚ùå Error creando tablas: {e}")
            return False

    def run_migration(self):
        """Ejecutar migraci√≥n completa"""
        self.log_migration("üöÄ Iniciando migraci√≥n de base de datos...")
        self.log_migration("=" * 60)
        
        try:
            # Crear backup
            if not self.create_backup():
                return False
            
            # Conectar a la base de datos
            conn = sqlite3.connect(self.db_path)
            
            # PASO 1: Crear todas las tablas si no existen
            if not self.create_tables_if_not_exist(conn):
                conn.close()
                return False
            
            # PASO 2: Lista de migraciones a ejecutar
            migrations = [
                ("personas", self.migrate_personas_table),
                ("usuarios", self.migrate_usuarios_table),
                ("configuraci√≥n", self.update_configuracion_table),
                ("configuraciones por defecto", self.insert_default_configurations)
            ]
            
            # PASO 3: Ejecutar migraciones
            migration_success = True
            for name, migration_func in migrations:
                self.log_migration(f"üîÑ Ejecutando migraci√≥n: {name}")
                if not migration_func(conn):
                    self.log_migration(f"‚ùå Error en migraci√≥n: {name}")
                    migration_success = False
                    break
            
            if migration_success:
                # Verificar integridad
                self.verify_migration_integrity(conn)
                
                # Cerrar conexi√≥n
                conn.close()
                
                self.log_migration("=" * 60)
                self.log_migration("‚úÖ MIGRACI√ìN COMPLETADA EXITOSAMENTE")
                self.log_migration(f"üìÅ Backup disponible en: {self.backup_path}")
                self.log_migration("=" * 60)
                
                return True
            else:
                conn.close()
                self.log_migration("‚ùå MIGRACI√ìN FALL√ì")
                return False
                
        except Exception as e:
            self.log_migration(f"üí• Error cr√≠tico en migraci√≥n: {e}")
            self.log_migration("=" * 60)
            return False

def main():
    """Funci√≥n principal para ejecutar migraci√≥n desde l√≠nea de comandos"""
    print("üöÄ Sistema de Emergencias Villa Allende")
    print("   Script de Migraci√≥n de Base de Datos v2.0")
    print("=" * 50)
    
    migrator = DatabaseMigrator()
    success = migrator.run_migration()
    
    if success:
        print("\n‚úÖ Migraci√≥n completada exitosamente")
        print("üí° Puede iniciar la aplicaci√≥n con: python run.py")
        return 0
    else:
        print("\n‚ùå Migraci√≥n fall√≥")
        print("üìã Revise el archivo migration.log para m√°s detalles")
        return 1

if __name__ == '__main__':
    sys.exit(main())