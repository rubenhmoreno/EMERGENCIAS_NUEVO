#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Emergencias Villa Allende v2.0
Script de Inicio Principal

Mejoras en v2.0:
- Verificaci√≥n completa de dependencias
- Migraci√≥n autom√°tica de base de datos
- Campo email agregado en personas
- Verificaci√≥n de integridad del sistema
- Logging mejorado
- Manejo de errores robusto
"""

import os
import sys
import logging
from datetime import datetime
import traceback

def setup_logging():
    """Configurar sistema de logging"""
    log_dir = 'logs'
    os.makedirs(log_dir, exist_ok=True)
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(os.path.join(log_dir, 'app.log')),
            logging.StreamHandler()
        ]
    )
    
    return logging.getLogger(__name__)

def print_banner():
    """Mostrar banner del sistema"""
    print("=" * 70)
    print("üö® SISTEMA DE EMERGENCIAS VILLA ALLENDE v2.0")
    print("   Gesti√≥n Integral de Llamados de Emergencia")
    print("   Villa Allende, C√≥rdoba - Argentina")
    print("=" * 70)
    print(f"üìÖ Iniciado: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"üêç Python: {sys.version.split()[0]}")
    print(f"üìÅ Directorio: {os.getcwd()}")
    print("=" * 70)

def check_python_version():
    """Verificar versi√≥n de Python"""
    if sys.version_info < (3, 8):
        print("‚ùå ERROR: Se requiere Python 3.8 o superior")
        print(f"   Versi√≥n actual: {sys.version}")
        print("   Descargue Python desde: https://python.org")
        return False
    
    print(f"‚úÖ Python {sys.version.split()[0]} - OK")
    return True

def check_dependencies():
    """Verificar dependencias cr√≠ticas"""
    print("\nüîç Verificando dependencias...")
    
    critical_deps = [
        ('flask', 'Flask'),
        ('flask_sqlalchemy', 'Flask-SQLAlchemy'),
        ('flask_login', 'Flask-Login'),
        ('werkzeug', 'Werkzeug'),
        ('requests', 'requests'),
        ('sqlite3', 'SQLite3 (built-in)')
    ]
    
    missing_deps = []
    
    for module, name in critical_deps:
        try:
            __import__(module)
            print(f"  ‚úÖ {name}")
        except ImportError:
            print(f"  ‚ùå {name} - FALTANTE")
            missing_deps.append(name)
    
    if missing_deps:
        print(f"\n‚ùå ERROR: Dependencias faltantes: {', '.join(missing_deps)}")
        print("üí° Soluci√≥n: pip install -r requirements.txt")
        return False
    
    print("‚úÖ Todas las dependencias est√°n instaladas")
    return True

def check_file_structure():
    """Verificar estructura de archivos"""
    print("\nüóÇÔ∏è  Verificando estructura de archivos...")
    
    required_files = [
        'app.py',
        'models.py', 
        'migrate_database.py',
        'requirements.txt'
    ]
    
    required_dirs = [
        'templates',
        'static',
        'utils'
    ]
    
    missing_items = []
    
    # Verificar archivos
    for file in required_files:
        if os.path.exists(file):
            print(f"  ‚úÖ {file}")
        else:
            print(f"  ‚ùå {file} - FALTANTE")
            missing_items.append(file)
    
    # Verificar directorios
    for directory in required_dirs:
        if os.path.exists(directory):
            print(f"  ‚úÖ {directory}/")
        else:
            print(f"  ‚ùå {directory}/ - FALTANTE")
            missing_items.append(f"{directory}/")
    
    if missing_items:
        print(f"\n‚ùå ERROR: Archivos/directorios faltantes: {', '.join(missing_items)}")
        print("üí° Soluci√≥n: Restaurar desde backup o reinstalar")
        return False
    
    print("‚úÖ Estructura de archivos completa")
    return True

def run_database_migration():
    """Ejecutar migraci√≥n de base de datos"""
    print("\nüóÑÔ∏è  Verificando base de datos...")
    
    try:
        # Ejecutar migraci√≥n autom√°tica
        from migrate_database import DatabaseMigrator
        
        migrator = DatabaseMigrator()
        if migrator.run_migration():
            print("‚úÖ Base de datos migrada/verificada correctamente")
            return True
        else:
            print("‚ùå Error en migraci√≥n de base de datos")
            return False
            
    except ImportError:
        print("‚ö†Ô∏è  Script de migraci√≥n no disponible, intentando inicializaci√≥n b√°sica...")
        return True
    except Exception as e:
        print(f"‚ùå Error ejecutando migraci√≥n: {e}")
        return False

def initialize_application():
    """Inicializar aplicaci√≥n Flask"""
    print("\nüöÄ Inicializando aplicaci√≥n...")
    
    try:
        # Importar aplicaci√≥n
        from app import app, init_database
        
        # Inicializar base de datos en contexto de aplicaci√≥n
        with app.app_context():
            init_database()
        
        print("‚úÖ Aplicaci√≥n inicializada correctamente")
        return app
        
    except Exception as e:
        print(f"‚ùå Error inicializando aplicaci√≥n: {e}")
        print(f"üìã Detalles del error:")
        print(traceback.format_exc())
        return None

def start_application(app):
    """Iniciar servidor Flask"""
    print("\nüåê Iniciando servidor web...")
    print("=" * 70)
    print("üîó URL de acceso: http://localhost:5000")
    print("üë§ Usuario por defecto: admin")
    print("üîë Contrase√±a por defecto: 123456")
    print("=" * 70)
    print("‚ö†Ô∏è  IMPORTANTE:")
    print("   ‚Ä¢ Cambie la contrase√±a por defecto despu√©s del primer acceso")
    print("   ‚Ä¢ Configure WhatsApp desde el panel de configuraci√≥n")
    print("   ‚Ä¢ Realice un backup inicial del sistema")
    print("=" * 70)
    print("üõë Presione Ctrl+C para detener el servidor")
    print("=" * 70)
    
    try:
        # Configurar desde config.ini si existe
        host = '0.0.0.0'
        port = 5000
        debug = False
        
        if os.path.exists('config.ini'):
            try:
                import configparser
                config = configparser.ConfigParser()
                config.read('config.ini')
                
                host = config.get('SERVER', 'host', fallback='0.0.0.0')
                port = config.getint('SERVER', 'port', fallback=5000)
                debug = config.getboolean('SERVER', 'debug', fallback=False)
                
                print(f"üìã Configuraci√≥n cargada desde config.ini")
            except Exception as e:
                print(f"‚ö†Ô∏è  Error leyendo config.ini, usando valores por defecto: {e}")
        
        print(f"üåê Servidor iniciando en {host}:{port}")
        print(f"üîß Modo debug: {'Activado' if debug else 'Desactivado'}")
        
        # Iniciar servidor
        app.run(
            host=host,
            port=port,
            debug=debug,
            threaded=True
        )
        
    except KeyboardInterrupt:
        print("\n\nüõë Sistema detenido por el usuario")
        print("üëã ¬°Hasta la vista!")
        
    except Exception as e:
        print(f"\n‚ùå Error ejecutando servidor: {e}")
        print("üìã Detalles del error:")
        print(traceback.format_exc())
        return False
    
    return True

def show_system_status():
    """Mostrar estado del sistema despu√©s de las verificaciones"""
    print("\nüìä ESTADO DEL SISTEMA:")
    print("=" * 40)
    
    # Verificar base de datos
    if os.path.exists('emergency_system.db'):
        size = os.path.getsize('emergency_system.db')
        print(f"üóÑÔ∏è  Base de datos: OK ({size} bytes)")
    else:
        print("üóÑÔ∏è  Base de datos: Se crear√° autom√°ticamente")
    
    # Verificar logs
    if os.path.exists('logs'):
        log_files = len([f for f in os.listdir('logs') if f.endswith('.log')])
        print(f"üìÑ Logs: {log_files} archivo(s)")
    else:
        print("üìÑ Logs: Directorio se crear√°")
    
    # Verificar backups
    if os.path.exists('backups'):
        backup_files = len([f for f in os.listdir('backups') if f.endswith('.zip')])
        print(f"üíæ Backups: {backup_files} archivo(s)")
    else:
        print("üíæ Backups: Directorio se crear√°")
    
    # Verificar SSL
    if os.path.exists('ssl'):
        ssl_files = len([f for f in os.listdir('ssl') if f.endswith(('.crt', '.key'))])
        print(f"üîê SSL: {ssl_files} archivo(s)")
    else:
        print("üîê SSL: No configurado")
    
    print("=" * 40)

def main():
    """Funci√≥n principal"""
    # Configurar logging
    logger = setup_logging()
    
    try:
        # Mostrar banner
        print_banner()
        
        # Verificaciones pre-inicio
        checks = [
            ("Versi√≥n de Python", check_python_version),
            ("Dependencias", check_dependencies), 
            ("Estructura de archivos", check_file_structure),
            ("Migraci√≥n de base de datos", run_database_migration)
        ]
        
        for check_name, check_func in checks:
            if not check_func():
                print(f"\nüíî FALLO EN VERIFICACI√ìN: {check_name}")
                print("üîß Corrija los errores antes de continuar")
                input("\n‚è∏Ô∏è  Presione Enter para salir...")
                sys.exit(1)
        
        # Mostrar estado del sistema
        show_system_status()
        
        # Inicializar aplicaci√≥n
        app = initialize_application()
        if not app:
            print("\nüíî No se pudo inicializar la aplicaci√≥n")
            input("\n‚è∏Ô∏è  Presione Enter para salir...")
            sys.exit(1)
        
        # Mostrar informaci√≥n de novedades v2.0
        print("\nüéâ NOVEDADES EN VERSI√ìN 2.0:")
        print("  ‚úÖ Campo email agregado en tabla personas")
        print("  ‚úÖ Migraci√≥n autom√°tica de base de datos")
        print("  ‚úÖ Sistema de backup mejorado")
        print("  ‚úÖ Herramientas de diagn√≥stico integradas")
        print("  ‚úÖ Instalador autom√°tico completo")
        print("  ‚úÖ Servicio Windows incluido")
        
        # Pausa antes de iniciar servidor
        print(f"\nüöÄ Sistema verificado y listo para iniciar")
        print("‚è≥ Iniciando en 3 segundos...")
        
        import time
        time.sleep(3)
        
        # Iniciar servidor
        start_application(app)
        
    except KeyboardInterrupt:
        print("\n\nüõë Inicio cancelado por el usuario")
        
    except Exception as e:
        logger.error(f"Error cr√≠tico en startup: {e}")
        print(f"\nüí• ERROR CR√çTICO: {e}")
        print("üìã Detalles completos en logs/app.log")
        print(traceback.format_exc())
        input("\n‚è∏Ô∏è  Presione Enter para salir...")
        sys.exit(1)

if __name__ == '__main__':
    main()
